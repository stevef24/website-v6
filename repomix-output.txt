This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-08T11:32:40.422Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  blog/
    [...slug]/
      page.tsx
    page.tsx
  data/
    resume.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  magicui/
    text-reveal.tsx
  pages/
    About.tsx
    Hero.tsx
    Projects.tsx
    Values.tsx
  providers/
    ThemeProvider.tsx
  ui/
    Blur.tsx
    button.tsx
    callout.tsx
    card.tsx
    Contact.tsx
    dock.tsx
    Experience.tsx
    grid-pattern.tsx
    icons.tsx
    mdx-components.tsx
    mobile-nav.tsx
    mode-toggle.tsx
    navbar.tsx
    pagination.tsx
    PostItem.tsx
    ProjectHoverCard.tsx
    QueryPagination.tsx
    scroll-area.tsx
    SectionHeader.tsx
    separator.tsx
    sheet.tsx
    tooltip.tsx
    Typography.tsx
    WorkExperienceSection.tsx
config/
  site.ts
content/
  blog/
    nextjs-eslint-prettier.mdx
    nextjs-lintin.mdx
hooks/
  GetPointerMove.tsx
lib/
  utils.ts
public/
  next.svg
  vercel.svg
styles/
  mdx.css
.eslintrc.json
.gitignore
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
velite.config.ts

================================================================
Repository Files
================================================================

================
File: app/blog/[...slug]/page.tsx
================
import { posts } from "#site/content";
import { notFound } from "next/navigation";
import { MDXContent } from "@/components/ui/mdx-components";

interface PostPageProps {
	params: {
		slug: string[];
	};
}

async function getPostFromParmas(params: PostPageProps["params"]) {
	const slug = params?.slug.join("/");
	const post = posts.find((post) => post.slugAsParams === slug);
	return post;
}

export async function generateStaticParams(): Promise<
	PostPageProps["params"][]
> {
	return posts.map((post) => ({ slug: post.slugAsParams.split("/") }));
}

const Post = async ({ params: { slug } }: PostPageProps) => {
	const post = await getPostFromParmas({ slug });

	if (!post || !post.published) {
		notFound();
	}

	return (
		<article className="contaienr py-6 max-sm:px-4 prose dark:prose-invert max-w-3xl mx-auto max-sm:mt-[100px] max-sm:mb-[50px] md:mb-[150px]">
			<h1 className="mb-2">{post.title}</h1>
			{post.description ? (
				<p className="text-xl mt-0  text-muted-foreground">
					{post.description}
				</p>
			) : null}
			<hr className="my-4" />
			<MDXContent code={post.body} />
		</article>
	);
};

export default Post;

================
File: app/blog/page.tsx
================
/* eslint-disable react/no-unescaped-entities */
"use client";

import React from "react";
import { posts } from "#site/content";
import { sortPosts } from "@/lib/utils";
import "@/styles/mdx.css";
import { motion } from "framer-motion";
import { BookOpen, Calendar, ChevronRight, Clock } from "lucide-react";
import {
	Card,
	CardContent,
	CardDescription,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { QueryPagination } from "@/components/ui/QueryPagination";
import Link from "next/link";

const POSTS_PER_PAGE = 10;

interface BlogPageProps {
	searchParams: {
		page?: string;
	};
}

const fadeIn = {
	initial: { opacity: 0, y: 20 },
	animate: { opacity: 1, y: 0 },
	exit: { opacity: 0, y: 20 },
};

export default function BlogPage({ searchParams }: BlogPageProps) {
	const currentPage = Number(searchParams.page) || 1;
	const sortedPosts = sortPosts(posts.filter((post) => post.published));
	const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
	const totalPosts = sortedPosts.length;

	const displayPosts = sortedPosts.slice(
		POSTS_PER_PAGE * (currentPage - 1),
		POSTS_PER_PAGE * currentPage
	);

	return (
		<motion.div
			initial="initial"
			animate="animate"
			exit="exit"
			className="container max-w-4xl py-6 lg:py-10 max-sm:mt-[100px]"
		>
			<motion.div variants={fadeIn} className="relative mb-8">
				<div className="relative">
					<h1 className="text-4xl font-black lg:text-5xl mb-4">
						<span className="inline-block text-orange-500">Blog</span>
					</h1>
					<p className="text-xl text-muted-foreground max-w-2xl">
						Welcome to my blog! Here, you'll find my thoughts, learnings, and
						opinions on all things related to code. I'm always open to
						discussions, so if something here sparks your interest, don't
						hesitate to reach out.
					</p>
				</div>
			</motion.div>

			<div className="flex items-center justify-between mb-6">
				<div className="flex items-center gap-2 text-muted-foreground">
					<span className="text-sm font-medium">
						Page {currentPage} of {totalPages}
					</span>
					<Separator orientation="vertical" className="h-4" />
					<span className="text-sm">{totalPosts} posts total</span>
				</div>
				<motion.div variants={fadeIn}>
					<QueryPagination totalPages={totalPages} />
				</motion.div>
			</div>

			<ScrollArea
				className="h-[calc(100vh-400px)] pr-4"
				aria-label="Blog posts list"
			>
				{displayPosts.length > 0 ? (
					<motion.ul
						variants={fadeIn}
						className="space-y-6"
						role="list"
						aria-label="Blog posts"
					>
						{displayPosts.map(({ date, title, slug, description }, index) => (
							<motion.li
								key={slug}
								initial={{ opacity: 0, y: 20 }}
								animate={{ opacity: 1, y: 0 }}
								transition={{ delay: index * 0.1 }}
							>
								<Link href={`/${slug}`} aria-label={`Read article: ${title}`}>
									<Card className="group hover:shadow-lg transition-all duration-300 overflow-hidden border-primary/10 hover:border-primary/20">
										<CardContent className="p-6">
											<div className="space-y-4">
												<div className="flex items-center justify-between text-sm text-muted-foreground">
													<div className="flex items-center gap-2">
														<Calendar className="h-4 w-4" aria-hidden="true" />
														<time dateTime={date}>
															{new Date(date).toLocaleDateString()}
														</time>
													</div>
													<div className="flex items-center gap-2">
														<Clock className="h-4 w-4" aria-hidden="true" />
														<span>
															{description
																? Math.ceil(description.length / 200)
																: 1}
															min read
														</span>
													</div>
												</div>

												<div>
													<h2 className="text-2xl font-bold tracking-tight mb-2 group-hover:text-primary transition-colors">
														{title}
													</h2>
													<p className="text-muted-foreground line-clamp-2">
														{description}
													</p>
												</div>

												<div className="flex justify-between items-center">
													<Button
														variant="ghost"
														className="group-hover:translate-x-1 transition-transform duration-300"
													>
														Read More{" "}
														<ChevronRight
															className="ml-2 h-4 w-4"
															aria-hidden="true"
														/>
													</Button>
													<div className="flex items-center gap-2 text-sm text-muted-foreground">
														<BookOpen className="h-4 w-4" aria-hidden="true" />
														<span>Article</span>
													</div>
												</div>
											</div>
										</CardContent>
									</Card>
								</Link>
							</motion.li>
						))}
					</motion.ul>
				) : (
					<motion.div variants={fadeIn}>
						<Card>
							<CardContent className="p-6 text-center text-muted-foreground">
								<p>No posts available at the moment. Check back soon!</p>
							</CardContent>
						</Card>
					</motion.div>
				)}
			</ScrollArea>
		</motion.div>
	);
}

================
File: app/data/resume.tsx
================
import { Icons } from "@/components/ui/icons";
import { CodeIcon, HomeIcon, NotebookIcon, PencilLine } from "lucide-react";
import { GitHubLogoIcon, GlobeIcon } from "@radix-ui/react-icons";

export const DATA = {
	navbar: [
		{ href: "/", icon: HomeIcon, label: "Home" },
		{ href: "/blog", icon: NotebookIcon, label: "Blog" },
		{ href: "#", icon: CodeIcon, label: "Projects" },
		{ href: "#", icon: PencilLine, label: "Notes" },
	],
	contact: {
		email: "hello@example.com",
		tel: "+123456789",
		social: {
			GitHub: {
				name: "GitHub",
				url: "https://github.com/stevef24",
				icon: Icons.github,

				navbar: true,
			},
			LinkedIn: {
				name: "LinkedIn",
				url: "https://www.linkedin.com/in/stavfernandes24/",
				icon: Icons.linkedin,

				navbar: true,
			},
			email: {
				name: "Send Email",
				url: "#",
				icon: Icons.email,

				navbar: false,
			},
		},
	},
	education: [
		{
			school: "Buildspace",
			href: "https://buildspace.so",
			degree: "s3, s4, sf1, s5",
			logoUrl: "/buildspace.jpg",
			start: "2023",
			end: "2024",
		},
		{
			school: "University of Waterloo",
			href: "https://uwaterloo.ca",
			degree: "Bachelor's Degree of Computer Science (BCS)",
			logoUrl: "/waterloo.png",
			start: "2016",
			end: "2021",
		},
		{
			school: "Wilfrid Laurier University",
			href: "https://wlu.ca",
			degree: "Bachelor's Degree of Business Administration (BBA)",
			logoUrl: "/laurier.png",
			start: "2016",
			end: "2021",
		},
		{
			school: "International Baccalaureate",
			href: "https://ibo.org",
			degree: "IB Diploma",
			logoUrl: "/ib.png",
			start: "2012",
			end: "2016",
		},
	],

	dummyProjects: [
		{
			id: "1",
			title: "Contentify",
			byline: "Social Media Content Creator",
			description:
				"A social media content generator for Twitter, LinkedIn, and more. Create quick posts with the right styling and sizing for each platform.",
			technologies: [
				"Next.js",
				"React",
				"Clerk",
				"Drizzle ORM",
				"PostgreSQL",
				"Vercel",
				"Docker",
			],
			githubUrl: "https://github.com/stevef24/Fullstack-app",
			liveUrl: "",
		},
		{
			id: "2",
			title: "Dev Overflow",
			byline: "Stack Overflow Clone",
			description:
				"A question and answer platform inspired by Stack Overflow, built using modern web technologies to help developers connect and share knowledge.",
			technologies: ["Next.js", "React", "Tailwind CSS", "Vercel"],
			githubUrl: "https://github.com/stevef24/Next13-Stackoverflow",
			liveUrl: "https://next13-stackoverflow-gj99kv6ln-stevef24.vercel.app/",
		},
		{
			id: "3",
			title: "Lugh AI",
			byline: "AI-Powered SaaS Solution",
			description:
				"An AI-powered SaaS platform that provides advanced features and personalized services for users leveraging machine learning technologies.",
			technologies: ["React", "Python", "Flask", "Docker"],
			githubUrl: "https://github.com/stevef24/AI-Saas/tree/main/lughai",
		},
		{
			id: "4",
			title: "City Canvas",
			byline: "Collaborative City Mapping Tool",
			description:
				"An interactive platform to collaboratively map and visualize city projects, helping users plan and engage with urban spaces.",
			technologies: ["Next.js", "React", "Mapbox", "Tailwind CSS", "Node.js"],
			githubUrl: "https://github.com/Nayem59/CityCanvas/tree/main/CityCanvas",
		},
	],
} as const;

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
	.circular-fadeout {
		mask-image: radial-gradient(
			ellipse at center,
			rgb(0, 0, 0) 10%,
			rgba(0, 0, 0, 0) 100%
		);
		mask-size: cover;
	}
}

@layer base {
	:root {
		--background: 0 0% 100%;
		--foreground: 20 14.3% 4.1%;
		--card: 0 0% 100%;
		--card-foreground: 20 14.3% 4.1%;
		--popover: 0 0% 100%;
		--popover-foreground: 20 14.3% 4.1%;
		--primary: 24.6 95% 53.1%;
		--primary-foreground: 60 9.1% 97.8%;
		--secondary: 60 4.8% 95.9%;
		--secondary-foreground: 24 9.8% 10%;
		--muted: 60 4.8% 95.9%;
		--muted-foreground: 25 5.3% 44.7%;
		--accent: 60 4.8% 95.9%;
		--accent-foreground: 24 9.8% 10%;
		--destructive: 0 84.2% 60.2%;
		--destructive-foreground: 60 9.1% 97.8%;
		--border: 20 5.9% 90%;
		--input: 20 5.9% 90%;
		--ring: 24.6 95% 53.1%;
		--radius: 0.5rem;
	}

	.dark {
		--background: 20 14.3% 4.1%;
		--foreground: 60 9.1% 97.8%;
		--card: 20 14.3% 4.1%;
		--card-foreground: 60 9.1% 97.8%;
		--popover: 20 14.3% 4.1%;
		--popover-foreground: 60 9.1% 97.8%;
		--primary: 20.5 90.2% 48.2%;
		--primary-foreground: 60 9.1% 97.8%;
		--secondary: 12 6.5% 15.1%;
		--secondary-foreground: 60 9.1% 97.8%;
		--muted: 12 6.5% 15.1%;
		--muted-foreground: 24 5.4% 63.9%;
		--accent: 12 6.5% 15.1%;
		--accent-foreground: 60 9.1% 97.8%;
		--destructive: 0 72.2% 50.6%;
		--destructive-foreground: 60 9.1% 97.8%;
		--border: 12 6.5% 15.1%;
		--input: 12 6.5% 15.1%;
		--ring: 20.5 90.2% 48.2%;
	}
}

@layer base {
	* {
		@apply border-border;
	}
	body {
		@apply bg-background text-foreground;
	}
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Poppins as FontSans } from "next/font/google";
import "./globals.css";
import { cn } from "@/lib/utils";
import { ThemeProvider } from "@/components/providers/ThemeProvider";
import { TooltipProvider } from "@/components/ui/tooltip";
import Navbar from "@/components/ui/navbar";

const fontSans = FontSans({
	subsets: ["latin"],
	weight: ["400", "500", "600", "700"],
	variable: "--font-sans",
});

export const metadata: Metadata = {
	title: "Stav Fernandes - Frontend Developer",
	description: "Personal portfolio website",
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en" suppressHydrationWarning className="scroll-pt-[3.5rem]">
			<body
				className={cn(
					"min-h-screen bg-background font-sans antialiased transition-colors duration-100",
					fontSans.variable
				)}
			>
				<ThemeProvider attribute="class" defaultTheme="light">
					<TooltipProvider delayDuration={0}>
						{children}
						<Navbar />
					</TooltipProvider>
				</ThemeProvider>
			</body>
		</html>
	);
}

================
File: app/page.tsx
================
import About from "@/components/pages/About";
import Hero from "@/components/pages/Hero";
import Projects from "@/components/pages/Projects";
import Values from "@/components/pages/Values";
import BlurFade from "@/components/ui/Blur";
import Contact from "@/components/ui/Contact";
import Experience from "@/components/ui/Experience";
import SectionHeader from "@/components/ui/SectionHeader";

export default function Home() {
	return (
		<BlurFade>
			<header>
				<Hero />
			</header>
			<main className="max-w-6xl mx-auto py-12 sm:py-24 px-6">
				<SectionHeader title="About" direction="row" />
				<About />
				<SectionHeader title="Experience" direction="row-reverse" />
				<Experience />
				<SectionHeader title="Values" direction="row" />
				<Values />
				<SectionHeader title="Projects" direction="row-reverse" />
				<Projects />
				<SectionHeader title="Contact" direction="row" />
				<Contact />
			</main>
		</BlurFade>
	);
}

================
File: components/magicui/text-reveal.tsx
================
"use client";

import { FC, ReactNode, useRef } from "react";
import { motion, useScroll, useTransform } from "framer-motion";

import { cn } from "@/lib/utils";

interface TextRevealByWordProps {
  text: string;
  className?: string;
}

export const TextRevealByWord: FC<TextRevealByWordProps> = ({
  text,
  className,
}) => {
  const targetRef = useRef<HTMLDivElement | null>(null);

  const { scrollYProgress } = useScroll({
    target: targetRef,
  });
  const words = text.split(" ");

  return (
    <div ref={targetRef} className={cn("relative z-0 h-[200vh]", className)}>
      <div
        className={
          "sticky top-0 mx-auto flex h-[50%] max-w-4xl items-center bg-transparent px-[1rem] py-[5rem]"
        }
      >
        <p
          ref={targetRef}
          className={
            "flex flex-wrap p-5 text-2xl font-bold text-black/20 dark:text-white/20 md:p-8 md:text-3xl lg:p-10 lg:text-4xl xl:text-5xl"
          }
        >
          {words.map((word, i) => {
            const start = i / words.length;
            const end = start + 1 / words.length;
            return (
              <Word key={i} progress={scrollYProgress} range={[start, end]}>
                {word}
              </Word>
            );
          })}
        </p>
      </div>
    </div>
  );
};

interface WordProps {
  children: ReactNode;
  progress: any;
  range: [number, number];
}

const Word: FC<WordProps> = ({ children, progress, range }) => {
  const opacity = useTransform(progress, range, [0, 1]);
  return (
    <span className="xl:lg-3 relative mx-1 lg:mx-2.5">
      <span className={"absolute opacity-30"}>{children}</span>
      <motion.span
        style={{ opacity: opacity }}
        className={"text-black dark:text-white"}
      >
        {children}
      </motion.span>
    </span>
  );
};

export default TextRevealByWord;

================
File: components/pages/About.tsx
================
/* eslint-disable react/no-unescaped-entities */
"use client";

import BlurFade from "../ui/Blur";

export default function About() {
	return (
		<BlurFade inView>
			<p className="leading-7 [&:not(:first-child)]:mt-6 text-left">
				Hey there, I’m Stav Fernandes, a frontend developer with a passion for
				creating seamless digital experiences. But there’s more to me than just
				lines of code. I thrive on collaboration, believing that working with
				others who challenge and inspire growth is key to achieving our best.
				Boldness and a strong work ethic are at the heart of my approach,
				driving me to push boundaries and turn ambitious visions into reality. I
				see growth as an essential journey, fueled by curiosity—a trait I value
				in myself and my teams. Whether it’s exploring new technologies or
				refining my skills, I’m all in. Let’s connect, innovate, and create
				something amazing together!
			</p>
		</BlurFade>
	);
}

================
File: components/pages/Hero.tsx
================
"use client";
import { motion } from "framer-motion";
import GridPattern from "../ui/grid-pattern";
import { cn } from "@/lib/utils";
import Link from "next/link";

export default function Component() {
	return (
		<div className="relative h-[calc(100vh)] bg-background font-sans flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8 overflow-hidden">
			<div className="absolute h-[15vh] w-[30vw] rounded-full	 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/4 bg-orange-500/30 blur-[200px]" />
			<GridPattern
				squares={[
					[4, 4],
					[5, 1],
					[8, 2],
					[5, 3],
					[5, 5],
					[10, 10],
					[12, 15],
					[15, 10],
					[10, 15],
					[15, 10],
					[10, 15],
					[15, 10],
				]}
				className={cn(
					"[mask-image:radial-gradient(500px_circle_at_center,hsl(var(--primary)),transparent)]",
					"inset-x-0 inset-y-[-30%] h-[160%] skew-y-12"
				)}
			/>
			<motion.div
				initial={{ opacity: 0, y: 20 }}
				animate={{ opacity: 1, y: 0 }}
				transition={{ duration: 0.8 }}
				className="relative z-10 max-w-4xl mx-auto text-center space-y-8 min-h-[400px]  sm:space-y-10 md:space-y-12"
			>
				<h1 className="text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-bold leading-tight sm:leading-tight md:leading-tight lg:leading-tight [text-shadow:_0_0_50px_rgb(var(--primary-rgb)/0.5)]">
					Stav Fernandes
				</h1>
				<motion.h2
					initial={{ opacity: 0, y: 20 }}
					animate={{ opacity: 1, y: 0 }}
					transition={{ duration: 0.8, delay: 0.2 }}
					className="text-2xl sm:text-3xl md:text-4xl font-semibold text-primary"
				>
					Full Stack Software Engineer
				</motion.h2>
				<motion.div
					initial={{ opacity: 0, y: 20 }}
					animate={{ opacity: 1, y: 0 }}
					transition={{ duration: 0.8, delay: 0.4 }}
					className="text-lg sm:text-xl md:text-2xl max-w-2xl mx-auto"
				>
					<p className="text-muted-foreground">
						Building <span className="font-semibold">Interactive UI/UX</span>{" "}
						with
						<span className="font-semibold">React</span>,
						<span className="font-semibold">Responsive Design</span>, and
						<span className="font-semibold">Modern Front End Technologies</span>
					</p>
				</motion.div>

				<div className="">
					<motion.button
						initial={{ opacity: 0, y: 20 }}
						animate={{ opacity: 1, y: 0 }}
						transition={{ duration: 0.8, delay: 0.6 }}
						className="mt-8 bg-primary text-primary-foreground hover:bg-primary/90 rounded-full px-8 py-4 text-lg font-medium"
					>
						<Link
							href="/#contact"
							scroll={false}
							onClick={(e) => {
								e.preventDefault();
								document.getElementById("contact")?.scrollIntoView({
									behavior: "smooth",
								});
							}}
						>
							Contact Me
						</Link>
					</motion.button>
				</div>
			</motion.div>
		</div>
	);
}

================
File: components/pages/Projects.tsx
================
"use client";

import { DATA } from "@/app/data/resume";
import ProjectHoverCard from "../ui/ProjectHoverCard";
import { Button } from "@/components/ui/button";
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons";
import { useState, useEffect } from "react";
import { cn } from "@/lib/utils";

const Projects = () => {
	const [currentIndex, setCurrentIndex] = useState(0);
	const [cardsPerView, setCardsPerView] = useState(3);
	const projectsCount = DATA.dummyProjects.length;

	// Calculate if we're at the start or end
	const isAtStart = currentIndex === 0;
	const isAtEnd = currentIndex >= projectsCount - cardsPerView;

	useEffect(() => {
		const handleResize = () => {
			if (window.innerWidth < 640) {
				setCardsPerView(1);
			} else if (window.innerWidth < 1024) {
				setCardsPerView(2);
			} else {
				setCardsPerView(3);
			}
		};

		handleResize();
		window.addEventListener("resize", handleResize);
		return () => window.removeEventListener("resize", handleResize);
	}, []);

	const nextProject = () => {
		if (!isAtEnd) {
			setCurrentIndex((prev) => prev + 1);
		}
	};

	const previousProject = () => {
		if (!isAtStart) {
			setCurrentIndex((prev) => prev - 1);
		}
	};

	return (
		<div className="relative w-full max-w-[1400px] mx-auto px-4 sm:px-8 lg:px-16">
			<div className="overflow-hidden">
				<div
					className="flex transition-transform duration-300 ease-in-out"
					style={{
						transform: `translateX(-${currentIndex * (100 / cardsPerView)}%)`,
					}}
				>
					{DATA.dummyProjects.map((project) => (
						<div
							key={project.id}
							className={cn(
								"px-2 sm:px-4",
								cardsPerView === 1
									? "min-w-full max-w-[350px] mx-auto"
									: cardsPerView === 2
									? "min-w-[50%]"
									: "min-w-[33.333%]",
								"max-w-[425px]"
							)}
						>
							<ProjectHoverCard
								title={project.title}
								byline={project.byline}
								description={project.description}
								technologies={[...project.technologies]}
								githubUrl={project.githubUrl}
							/>
						</div>
					))}
				</div>
			</div>

			{/* Navigation Buttons */}
			<Button
				variant="ghost"
				size="icon"
				className={cn(
					"absolute left-0 sm:-left-6 lg:-left-8 top-1/2 -translate-y-1/2 h-10 w-10 sm:h-14 sm:w-14 rounded-full bg-background/80 backdrop-blur-sm",
					isAtStart
						? "opacity-50 cursor-not-allowed border-muted"
						: "hover:text-orange-500 border-orange-500 hover:border-orange-600",
					"border-2"
				)}
				onClick={previousProject}
				disabled={isAtStart}
			>
				<ChevronLeftIcon
					className={cn(
						"h-8 w-8 sm:h-10 sm:w-10", // Increased icon size
						!isAtStart && "text-orange-500"
					)}
				/>
				<span className="sr-only">Previous project</span>
			</Button>

			<Button
				variant="ghost"
				size="icon"
				className={cn(
					"absolute right-0 sm:-right-6 lg:-right-8 top-1/2 -translate-y-1/2 h-10 w-10 sm:h-14 sm:w-14 rounded-full bg-background/80 backdrop-blur-sm",
					isAtEnd
						? "opacity-50 cursor-not-allowed border-muted"
						: "hover:text-orange-500 border-orange-500 hover:border-orange-600",
					"border-2"
				)}
				onClick={nextProject}
				disabled={isAtEnd}
			>
				<ChevronRightIcon
					className={cn(
						"h-8 w-8 sm:h-10 sm:w-10", // Increased icon size
						!isAtEnd && "text-orange-500"
					)}
				/>
				<span className="sr-only">Next project</span>
			</Button>

			{/* Project Indicators */}
			<div className="absolute -bottom-8 left-1/2 -translate-x-1/2 flex gap-2">
				{Array.from({ length: Math.ceil(projectsCount / cardsPerView) }).map(
					(_, index) => (
						<button
							key={index}
							className={cn(
								"w-2 h-2 rounded-full transition-colors",
								Math.floor(currentIndex / cardsPerView) === index
									? "bg-primary"
									: "bg-primary/20 hover:bg-primary/40"
							)}
							onClick={() => setCurrentIndex(index * cardsPerView)}
						>
							<span className="sr-only">Go to project set {index + 1}</span>
						</button>
					)
				)}
			</div>
		</div>
	);
};

export default Projects;

================
File: components/pages/Values.tsx
================
/* eslint-disable react/no-unescaped-entities */
import React from "react";
import BlurFade from "../ui/Blur";
import { Typography, Variant } from "../ui/Typography";

const ValueItem = ({ content }: { content: string }) => (
	<div className="flex flex-col items-start space-y-4 text-left">
		<BlurFade inView>
			<Typography
				variant={Variant.body}
				className="text-foreground dark:text-white text-[16px] leading-relaxed"
			>
				<span className="text-6xl font-bold text-primary float-left mr-3 mt-1 leading-none">
					{content.charAt(0)}
				</span>
				{content.slice(1)}
			</Typography>
		</BlurFade>
	</div>
);

const Values = () => {
	return (
		<section className="container mx-auto px-4 py-6">
			<div className="flex flex-col space-y-12">
				<Typography
					variant={Variant.body}
					className="text-[16px] text-foreground dark:text-white mb-8  leading-relaxed"
				>
					These core values are at the heart of who I am and how I work. They're
					not just guidelines for me but{" "}
					<strong>qualities I look for in every team I join</strong>. By
					embracing{" "}
					<em>
						collaboration, boldness, a strong work ethic, growth, and curiosity
					</em>
					, I believe we can create a space where everyone thrives and
					contributes to something meaningful. This isn't just about checking
					boxes on a CV; it's about{" "}
					<strong>showing what I truly value and how I approach my work</strong>
					.
				</Typography>
				<ValueItem content="Collaboration is essential to reach your full potential. Surrounding yourself with people who push you to be your best is crucial. In an environment where everyone inspires each other to grow, we can all thrive together. That's why collaboration is not just a value but a fundamental part of my approach to work." />
				<ValueItem content="Boldness is about more than innovation; it's the courage to change what needs changing and to see possibilities others overlook. To make a real impact, I follow my vision, taking calculated risks and challenging norms. It's about pursuing new paths and creating my own when necessary. Through boldness, I strive to be the change I want to see in the world." />
				<ValueItem content="Work ethic is the foundation of any great achievement. It's not just a phrase for resumes; it's a deep commitment to becoming the best version of yourself. I believe in working smart and hard, on both myself and with those around me, to turn visions into reality. Consistent effort and dedication are essential, and without them, lasting success is unattainable." />
				<ValueItem content="Growth is fundamental to a fulfilling life. As humans, we inherently seek growth, consciously or subconsciously. It's what makes life worth living, providing us with opportunities to learn, adapt, and evolve. Growth fuels our hope that things can always get better." />
				<ValueItem content="Curiosity is my compass, guiding me through exploration and growth. More than raw intelligence, it's curiosity that sparks passion and drives me to uncover new things. It's through curiosity that we often make mistakes, and those mistakes are crucial stepping stones to success. I value curiosity in myself and in the teams I work with." />
			</div>
		</section>
	);
};

export default Values;

================
File: components/providers/ThemeProvider.tsx
================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
	return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: components/ui/Blur.tsx
================
"use client";

import { AnimatePresence, motion, useInView, Variants } from "framer-motion";
import { useRef } from "react";

interface BlurFadeProps {
	children: React.ReactNode;
	className?: string;
	variant?: {
		hidden: { y: number };
		visible: { y: number };
	};
	duration?: number;
	delay?: number;
	yOffset?: number;
	inView?: boolean;
	inViewMargin?: string;
	blur?: string;
}
const BlurFade = ({
	children,
	className,
	variant,
	duration = 0.4,
	delay = 0,
	yOffset = 6,
	inView = false,
	inViewMargin = "-50px",
	blur = "6px",
}: BlurFadeProps) => {
	const ref = useRef(null);
	const inViewResult = useInView(ref, { once: true, margin: inViewMargin });
	const isInView = !inView || inViewResult;
	const defaultVariants: Variants = {
		hidden: { y: yOffset, opacity: 0, filter: `blur(${blur})` },
		visible: { y: -yOffset, opacity: 1, filter: `blur(0px)` },
	};
	const combinedVariants = variant || defaultVariants;
	return (
		<AnimatePresence>
			<motion.div
				ref={ref}
				initial="hidden"
				animate={isInView ? "visible" : "hidden"}
				exit="hidden"
				variants={combinedVariants}
				transition={{
					delay: 0.04 + delay,
					duration,
					ease: "easeOut",
				}}
				className={className}
			>
				{children}
			</motion.div>
		</AnimatePresence>
	);
};

export default BlurFade;

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/callout.tsx
================
import { cn } from "@/lib/utils";
import { ReactNode } from "react";

interface CalloutProps {
	children?: ReactNode;
	type?: "default" | "warning" | "danger";
}

export function Callout({
	children,
	type = "default",
	...props
}: CalloutProps) {
	return (
		<div
			className={cn(
				"my-6 items-start rounded-md border boder-l-4 p-4 w-full dark:max-w-none",
				{
					"border-red-900 bg-red-50 dark:prose": type === "danger",
					"border-yellow-900 bg-yellow-50 dark:prose": type === "warning",
				}
			)}
			{...props}
		>
			<div>{children}</div>
		</div>
	);
}

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/Contact.tsx
================
"use client";

/* eslint-disable react/no-unescaped-entities */
import { motion } from "framer-motion";
import Link from "next/link";
import React from "react";

const Contact = () => {
	return (
		<motion.div
			whileInView={{
				opacity: 1,
				transition: { duration: 0.5, ease: "easeOut" },
			}}
			initial={{ opacity: 0 }}
			transition={{ duration: 0.7 }}
			className="grid place-items-center my-12"
			viewport={{ once: true, amount: "all" }}
			id="contact"
		>
			<div className="bg-accent max-sm:w-full w-[500px] h-[300px] rounded-xl flex-col flex  justify-center items-center">
				<h2 className="text-3xl md:text-5xl font-black text-end">
					Contact
					<span className="text-primary">.</span>
				</h2>
				<div className="max-w-[400px]">
					<p className="text-center my-4 text-muted-foreground leading-relaxed">
						Shoot me an{" "}
						<Link
							href={"mailto:stevefernandes24@hotmail.co.uk"}
							target="_blank"
							className="text-primary font-bold"
						>
							{" "}
							Email{" "}
						</Link>{" "}
						if you want to connect! You can also find me on
						<Link
							href={"https://www.linkedin.com/in/stavfernandes24/"}
							target="_blank"
							className="text-primary font-bold"
						>
							{" "}
							Linkedin{" "}
						</Link>
						if that's more your speed.
					</p>
				</div>
			</div>
		</motion.div>
	);
};

export default Contact;

================
File: components/ui/dock.tsx
================
"use client";
import { cn } from "@/lib/utils";
import { cva, type VariantProps } from "class-variance-authority";
import { motion, useMotionValue, useSpring, useTransform } from "framer-motion";
import React, { PropsWithChildren, useRef } from "react";

export interface DockProps extends VariantProps<typeof dockVariants> {
	className?: string;
	magnification?: number;
	distance?: number;
	children: React.ReactNode;
}

const DEFAULT_MAGNIFICATION = 60;
const DEFAULT_DISTANCE = 140;

const dockVariants = cva(
	"mx-auto w-max h-full p-2 flex items-end rounded-full border"
);

const Dock = React.forwardRef<HTMLDivElement, DockProps>(
	(
		{
			className,
			children,
			magnification = DEFAULT_MAGNIFICATION,
			distance = DEFAULT_DISTANCE,
			...props
		},
		ref
	) => {
		const mouseX = useMotionValue(Infinity);

		const renderChildren = () => {
			return React.Children.map(children, (child: any, index) => {
				const key = `dock-item-${index}`;
				return React.cloneElement(child, {
					mouseX: mouseX,
					magnification: magnification,
					distance: distance,
					key: key,
				});
			});
		};

		return (
			<motion.div
				ref={ref}
				onMouseMove={(e) => mouseX.set(e.pageX)}
				onMouseLeave={() => mouseX.set(Infinity)}
				{...props}
				className={cn(dockVariants({ className }))}
			>
				{renderChildren()}
			</motion.div>
		);
	}
);

Dock.displayName = "Dock";

export interface DockIconProps {
	size?: number;
	magnification?: number;
	distance?: number;
	mouseX?: any;
	className?: string;
	children?: React.ReactNode;
	props?: PropsWithChildren;
}

const DockIcon = ({
	size,
	magnification = DEFAULT_MAGNIFICATION,
	distance = DEFAULT_DISTANCE,
	mouseX,
	className,
	children,
	...props
}: DockIconProps) => {
	const ref = useRef<HTMLDivElement>(null);

	const distanceCalc = useTransform(mouseX, (val: number) => {
		const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };

		return val - bounds.x - bounds.width / 2;
	});

	let widthSync = useTransform(
		distanceCalc,
		[-distance, 0, distance],
		[40, magnification, 40]
	);

	let width = useSpring(widthSync, {
		mass: 0.1,
		stiffness: 150,
		damping: 12,
	});

	return (
		<motion.div
			ref={ref}
			style={{ width }}
			className={cn(
				"flex aspect-square items-center justify-center rounded-full",
				className
			)}
			{...props}
		>
			{children}
		</motion.div>
	);
};

DockIcon.displayName = "DockIcon";

export { Dock, DockIcon, dockVariants };

================
File: components/ui/Experience.tsx
================
import WorkExperienceSection from "./WorkExperienceSection";

// Define the type for each work experience item
type WorkExperience = {
	companyName: string;
	dateFrom: string;
	dateTo: string;
	role: string;
	roleDescription: string;
	location: string;
	tech: string[];
};

// Use the new type for the data array
const workExperience: WorkExperience[] = [
	{
		companyName: "Nationwide Building Society",
		dateFrom: "June 2023",
		dateTo: "Present",
		role: "Software Engineer",
		roleDescription:
			"I’m currently working on improving the user experience for mortgage-related products. My main focus is creating scalable, user-friendly UIs, and collaborating with different teams to bring new features to life. I’ve had the chance to guide new developers and keep things running smoothly using modern tech stacks like React, Tailwind CSS, and AWS.",
		location: "London, UK",
		tech: [
			"React",
			"Next.js",
			"Tailwind CSS",
			"TypeScript",
			"AWS Services",
			"Jenkins",
		],
	},
	{
		companyName: "Northcoders",
		dateFrom: "January 2023",
		dateTo: "May 2023",
		role: "Software Developer",
		roleDescription:
			"Gained hands-on experience in a full-stack environment, collaborating with a team to develop both web and mobile applications. I worked across different stages of development, from planning to deployment, and played a key role in launching a mobile app. It was a great opportunity to sharpen my teamwork and technical skills in a dynamic project setting.",
		location: "Manchester, UK",
		tech: ["JavaScript", "React", "Node.js", "PostgreSQL", "MongoDB", "Trello"],
	},
	{
		companyName: "Freelance Web Developer",
		dateFrom: "July 2022",
		dateTo: "December 2022",
		role: "Web Developer",
		roleDescription:
			"While traveling through Asia, I transitioned into web development by building websites for various clients. I focused on front-end development and picked up valuable skills like communication and adaptability while working remotely in different time zones.",
		location: "Remote, Asia",
		tech: ["HTML", "CSS", "Webflow", "JavaScript"],
	},
	{
		companyName: "Aviva Investors",
		dateFrom: "July 2019",
		dateTo: "June 2022",
		role: "Sales Enablement Associate & Multi-asset Investment Specialist",
		roleDescription:
			"In this role, I helped make sense of investment data and worked closely with sales teams and clients. I used my analytical and presentation skills to deliver insights and even automated some tasks to improve efficiency. It was a great mix of data, finance, and communication.",
		location: "London, UK",
		tech: ["Python", "Excel"],
	},
];

const Experience = () => {
	return (
		<section>
			<ul className="space-y-3">
				{workExperience.map(
					(
						{
							companyName,
							role,
							roleDescription,
							location,
							tech,
							dateFrom,
							dateTo,
						},
						index
					) => (
						<WorkExperienceSection
							companyName={companyName}
							role={role}
							roleDescription={roleDescription}
							location={location}
							tech={tech}
							key={index}
							index={index}
							dateFrom={dateFrom}
							dateTo={dateTo}
						/>
					)
				)}
			</ul>
		</section>
	);
};

export default Experience;

================
File: components/ui/grid-pattern.tsx
================
import { useId } from "react";

import { cn } from "@/lib/utils";

interface GridPatternProps {
	width?: number;
	height?: number;
	x?: number;
	y?: number;
	squares?: Array<[x: number, y: number]>;
	strokeDasharray?: string;
	className?: string;
	[key: string]: unknown;
}

export function GridPattern({
	width = 40,
	height = 40,
	x = -1,
	y = -1,
	strokeDasharray = "0",
	squares,
	className,
	...props
}: GridPatternProps) {
	const id = useId();

	return (
		<svg
			aria-hidden="true"
			className={cn(
				"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30",
				className
			)}
			{...props}
		>
			<defs>
				<pattern
					id={id}
					width={width}
					height={height}
					patternUnits="userSpaceOnUse"
					x={x}
					y={y}
				>
					<path
						d={`M.5 ${height}V.5H${width}`}
						fill="none"
						strokeDasharray={strokeDasharray}
					/>
				</pattern>
			</defs>
			<rect width="100%" height="100%" strokeWidth={0} fill={`url(#${id})`} />
			{squares && (
				<svg x={x} y={y} className="overflow-visible">
					{squares.map(([x, y], index) => (
						<rect
							strokeWidth="0"
							key={`${x}-${y}-${index}`}
							width={width - 1}
							height={height - 1}
							x={x * width + 1}
							y={y * height + 1}
						/>
					))}
				</svg>
			)}
		</svg>
	);
}

export default GridPattern;

================
File: components/ui/icons.tsx
================
import { GlobeIcon, MailIcon } from "lucide-react";

export type IconProps = React.HTMLAttributes<SVGElement>;

export const Icons = {
	globe: (props: IconProps) => <GlobeIcon {...props} />,
	email: (props: IconProps) => <MailIcon {...props} />,
	linkedin: (props: IconProps) => (
		<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
			<title>LinkedIn</title>
			<path
				fill="currentColor"
				d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
			/>
		</svg>
	),
	x: (props: IconProps) => (
		<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>
			<title>X</title>
			<path
				fill="currentColor"
				d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"
			/>
		</svg>
	),
	youtube: (props: IconProps) => (
		<svg
			width="32px"
			height="32px"
			viewBox="0 0 32 32"
			fill="currentColor"
			xmlns="http://www.w3.org/2000/svg"
			{...props}
		>
			<title>youtube</title>
			<path d="M29.41,9.26a3.5,3.5,0,0,0-2.47-2.47C24.76,6.2,16,6.2,16,6.2s-8.76,0-10.94.59A3.5,3.5,0,0,0,2.59,9.26,36.13,36.13,0,0,0,2,16a36.13,36.13,0,0,0,.59,6.74,3.5,3.5,0,0,0,2.47,2.47C7.24,25.8,16,25.8,16,25.8s8.76,0,10.94-.59a3.5,3.5,0,0,0,2.47-2.47A36.13,36.13,0,0,0,30,16,36.13,36.13,0,0,0,29.41,9.26ZM13.2,20.2V11.8L20.47,16Z" />
		</svg>
	),
	nextjs: (props: IconProps) => (
		<svg
			role="img"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
			className="size-8"
			fill="currentColor"
			{...props}
		>
			<title>Next.js</title>
			<path d="M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z" />
		</svg>
	),
	framermotion: (props: IconProps) => (
		<svg
			role="img"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
			className="size-8"
			fill="none"
			stroke="currentColor"
			strokeWidth="1"
			strokeLinecap="round"
			strokeLinejoin="round"
			{...props}
		>
			<title>Framer Motion</title>
			<path stroke="none" d="M0 0h24v24H0z" fill="none" />
			<path d="M12 12l-8 -8v16l16 -16v16l-4 -4" />
			<path d="M20 12l-8 8l-4 -4" />
		</svg>
	),
	tailwindcss: (props: IconProps) => (
		<svg
			role="img"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
			className="size-8"
			fill="currentColor"
			{...props}
		>
			<title>Tailwind CSS</title>
			<path d="m12.001 4.8c-3.2 0-5.2 1.6-6 4.8 1.2-1.6 2.6-2.2 4.2-1.8.913.228 1.565.89 2.288 1.624 1.177 1.194 2.538 2.576 5.512 2.576 3.2 0 5.2-1.6 6-4.8-1.2 1.6-2.6 2.2-4.2 1.8-.913-.228-1.565-.89-2.288-1.624-1.176-1.194-2.537-2.576-5.512-2.576zm-6 7.2c-3.2 0-5.2 1.6-6 4.8 1.2-1.6 2.6-2.2 4.2-1.8.913.228 1.565.89 2.288 1.624 1.177 1.194 2.538 2.576 5.512 2.576 3.2 0 5.2-1.6 6-4.8-1.2 1.6-2.6 2.2-4.2 1.8-.913-.228-1.565-.89-2.288-1.624-1.176-1.194-2.537-2.576-5.512-2.576z" />
		</svg>
	),
	typescript: (props: IconProps) => (
		<svg
			viewBox="0 0 32 32"
			xmlns="http://www.w3.org/2000/svg"
			className="size-8"
			fill="currentColor"
			{...props}
		>
			<path d="m0 16v16h32v-32h-32zm25.786-1.276c.813.203 1.432.568 2.005 1.156.292.312.729.885.766 1.026.01.042-1.38.974-2.224 1.495-.031.021-.156-.109-.292-.313-.411-.599-.844-.859-1.505-.906-.969-.063-1.594.443-1.589 1.292-.005.208.042.417.135.599.214.443.615.708 1.854 1.245 2.292.984 3.271 1.635 3.88 2.557.682 1.031.833 2.677.375 3.906-.51 1.328-1.771 2.234-3.542 2.531-.547.099-1.849.083-2.438-.026-1.286-.229-2.505-.865-3.255-1.698-.297-.323-.87-1.172-.833-1.229.016-.021.146-.104.292-.188s.682-.396 1.188-.688l.922-.536.193.286c.271.411.859.974 1.214 1.161 1.021.542 2.422.464 3.115-.156.281-.234.438-.594.417-.958 0-.37-.047-.536-.24-.813-.25-.354-.755-.656-2.198-1.281-1.651-.714-2.365-1.151-3.01-1.854-.406-.464-.708-1.01-.88-1.599-.12-.453-.151-1.589-.057-2.042.339-1.599 1.547-2.708 3.281-3.036.563-.109 1.875-.068 2.427.068zm-7.51 1.339.01 1.307h-4.167v11.839h-2.948v-11.839h-4.161v-1.281c0-.714.016-1.307.036-1.323.016-.021 2.547-.031 5.62-.026l5.594.016z" />
		</svg>
	),
	react: (props: IconProps) => (
		<svg
			role="img"
			viewBox="0 0 32 32"
			xmlns="http://www.w3.org/2000/svg"
			className="size-8"
			fill="currentColor"
			{...props}
		>
			<title>React</title>
			<path d="m16 13.146c-1.573 0-2.854 1.281-2.854 2.854s1.281 2.854 2.854 2.854 2.854-1.281 2.854-2.854-1.281-2.854-2.854-2.854zm-7.99 8.526-.63-.156c-4.688-1.188-7.38-3.198-7.38-5.521s2.693-4.333 7.38-5.521l.63-.156.177.625c.474 1.635 1.083 3.229 1.818 4.771l.135.281-.135.286c-.734 1.536-1.344 3.13-1.818 4.771zm-.921-9.74c-3.563 1-5.75 2.536-5.75 4.063s2.188 3.057 5.75 4.063c.438-1.391.964-2.745 1.578-4.063-.615-1.318-1.141-2.672-1.578-4.063zm16.901 9.74-.177-.625c-.474-1.635-1.083-3.229-1.818-4.766l-.135-.286.135-.286c.734-1.536 1.344-3.13 1.818-4.771l.177-.62.63.156c4.688 1.188 7.38 3.198 7.38 5.521s-2.693 4.333-7.38 5.521zm-.657-5.677c.641 1.385 1.172 2.745 1.578 4.063 3.568-1.005 5.75-2.536 5.75-4.063s-2.188-3.057-5.75-4.063c-.438 1.385-.964 2.745-1.578 4.063zm-16.255-4.068-.177-.625c-1.318-4.646-.917-7.979 1.099-9.141 1.979-1.141 5.151.208 8.479 3.625l.453.464-.453.464c-1.182 1.229-2.26 2.552-3.229 3.958l-.182.255-.313.026c-1.703.135-3.391.406-5.047.813zm2.531-8.838c-.359 0-.677.073-.943.229-1.323.766-1.557 3.422-.646 7.005 1.422-.318 2.859-.542 4.313-.672.833-1.188 1.75-2.323 2.734-3.391-2.078-2.026-4.047-3.172-5.458-3.172zm12.787 27.145c-.005 0-.005 0 0 0-1.901 0-4.344-1.427-6.875-4.031l-.453-.464.453-.464c1.182-1.229 2.26-2.552 3.229-3.958l.177-.255.313-.031c1.703-.13 3.391-.401 5.052-.813l.63-.156.177.625c1.318 4.646.917 7.974-1.099 9.135-.49.281-1.042.422-1.604.411zm-5.464-4.505c2.078 2.026 4.047 3.172 5.458 3.172h.005c.354 0 .672-.078.938-.229 1.323-.766 1.563-3.422.646-7.005-1.422.318-2.865.542-4.313.667-.833 1.193-1.75 2.323-2.734 3.396zm7.99-13.802-.63-.161c-1.661-.406-3.349-.677-5.052-.813l-.313-.026-.177-.255c-.969-1.406-2.047-2.729-3.229-3.958l-.453-.464.453-.464c3.328-3.417 6.5-4.766 8.479-3.625 2.016 1.161 2.417 4.495 1.099 9.141zm-5.255-2.276c1.521.141 2.969.365 4.313.672.917-3.583.677-6.24-.646-7.005-1.318-.76-3.797.406-6.401 2.943.984 1.073 1.896 2.203 2.734 3.391zm-10.058 20.583c-.563.01-1.12-.13-1.609-.411-2.016-1.161-2.417-4.49-1.099-9.135l.177-.625.63.156c1.542.391 3.24.661 5.047.813l.313.031.177.255c.969 1.406 2.047 2.729 3.229 3.958l.453.464-.453.464c-2.526 2.604-4.969 4.031-6.865 4.031zm-1.588-8.567c-.917 3.583-.677 6.24.646 7.005 1.318.75 3.792-.406 6.401-2.943-.984-1.073-1.901-2.203-2.734-3.396-1.453-.125-2.891-.349-4.313-.667zm7.979.838c-1.099 0-2.224-.047-3.354-.141l-.313-.026-.182-.26c-.635-.917-1.24-1.859-1.797-2.828-.563-.969-1.078-1.958-1.557-2.969l-.135-.286.135-.286c.479-1.01.995-2 1.557-2.969.552-.953 1.156-1.906 1.797-2.828l.182-.26.313-.026c2.234-.188 4.479-.188 6.708 0l.313.026.182.26c1.276 1.833 2.401 3.776 3.354 5.797l.135.286-.135.286c-.953 2.021-2.073 3.964-3.354 5.797l-.182.26-.313.026c-1.125.094-2.255.141-3.354.141zm-2.927-1.448c1.969.151 3.885.151 5.859 0 1.099-1.609 2.078-3.302 2.927-5.063-.844-1.76-1.823-3.453-2.932-5.063-1.948-.151-3.906-.151-5.854 0-1.109 1.609-2.089 3.302-2.932 5.063.849 1.76 1.828 3.453 2.932 5.063z" />
		</svg>
	),
	github: (props: IconProps) => (
		<svg viewBox="0 0 438.549 438.549" {...props}>
			<path
				fill="currentColor"
				d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
			></path>
		</svg>
	),
	notion: (props: IconProps) => (
		<svg
			width="100"
			height="100"
			viewBox="0 0 100 100"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
			{...props}
		>
			<path
				d="M6.017 4.313l55.333 -4.087c6.797 -0.583 8.543 -0.19 12.817 2.917l17.663 12.443c2.913 2.14 3.883 2.723 3.883 5.053v68.243c0 4.277 -1.553 6.807 -6.99 7.193L24.467 99.967c-4.08 0.193 -6.023 -0.39 -8.16 -3.113L3.3 79.94c-2.333 -3.113 -3.3 -5.443 -3.3 -8.167V11.113c0 -3.497 1.553 -6.413 6.017 -6.8z"
				fill="#fff"
			/>
			<path
				fillRule="evenodd"
				clipRule="evenodd"
				d="M61.35 0.227l-55.333 4.087C1.553 4.7 0 7.617 0 11.113v60.66c0 2.723 0.967 5.053 3.3 8.167l13.007 16.913c2.137 2.723 4.08 3.307 8.16 3.113l64.257 -3.89c5.433 -0.387 6.99 -2.917 6.99 -7.193V20.64c0 -2.21 -0.873 -2.847 -3.443 -4.733L74.167 3.143c-4.273 -3.107 -6.02 -3.5 -12.817 -2.917zM25.92 19.523c-5.247 0.353 -6.437 0.433 -9.417 -1.99L8.927 11.507c-0.77 -0.78 -0.383 -1.753 1.557 -1.947l53.193 -3.887c4.467 -0.39 6.793 1.167 8.54 2.527l9.123 6.61c0.39 0.197 1.36 1.36 0.193 1.36l-54.933 3.307 -0.68 0.047zM19.803 88.3V30.367c0 -2.53 0.777 -3.697 3.103 -3.893L86 22.78c2.14 -0.193 3.107 1.167 3.107 3.693v57.547c0 2.53 -0.39 4.67 -3.883 4.863l-60.377 3.5c-3.493 0.193 -5.043 -0.97 -5.043 -4.083zm59.6 -54.827c0.387 1.75 0 3.5 -1.75 3.7l-2.91 0.577v42.773c-2.527 1.36 -4.853 2.137 -6.797 2.137 -3.107 0 -3.883 -0.973 -6.21 -3.887l-19.03 -29.94v28.967l6.02 1.363s0 3.5 -4.857 3.5l-13.39 0.777c-0.39 -0.78 0 -2.723 1.357 -3.11l3.497 -0.97v-38.3L30.48 40.667c-0.39 -1.75 0.58 -4.277 3.3 -4.473l14.367 -0.967 19.8 30.327v-26.83l-5.047 -0.58c-0.39 -2.143 1.163 -3.7 3.103 -3.89l13.4 -0.78z"
				fill="#000"
			/>
		</svg>
	),
	openai: (props: IconProps) => (
		<svg role="img" viewBox="0 0 24 24" {...props}>
			<path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
		</svg>
	),
	googleDrive: (props: IconProps) => (
		<svg viewBox="0 0 87.3 78" xmlns="http://www.w3.org/2000/svg" {...props}>
			<path
				d="m6.6 66.85 3.85 6.65c.8 1.4 1.95 2.5 3.3 3.3l13.75-23.8h-27.5c0 1.55.4 3.1 1.2 4.5z"
				fill="#0066da"
			/>
			<path
				d="m43.65 25-13.75-23.8c-1.35.8-2.5 1.9-3.3 3.3l-25.4 44a9.06 9.06 0 0 0 -1.2 4.5h27.5z"
				fill="#00ac47"
			/>
			<path
				d="m73.55 76.8c1.35-.8 2.5-1.9 3.3-3.3l1.6-2.75 7.65-13.25c.8-1.4 1.2-2.95 1.2-4.5h-27.502l5.852 11.5z"
				fill="#ea4335"
			/>
			<path
				d="m43.65 25 13.75-23.8c-1.35-.8-2.9-1.2-4.5-1.2h-18.5c-1.6 0-3.15.45-4.5 1.2z"
				fill="#00832d"
			/>
			<path
				d="m59.8 53h-32.3l-13.75 23.8c1.35.8 2.9 1.2 4.5 1.2h50.8c1.6 0 3.15-.45 4.5-1.2z"
				fill="#2684fc"
			/>
			<path
				d="m73.4 26.5-12.7-22c-.8-1.4-1.95-2.5-3.3-3.3l-13.75 23.8 16.15 28h27.45c0-1.55-.4-3.1-1.2-4.5z"
				fill="#ffba00"
			/>
		</svg>
	),
	whatsapp: (props: IconProps) => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 175.216 175.552"
			{...props}
		>
			<defs>
				<linearGradient
					id="b"
					x1="85.915"
					x2="86.535"
					y1="32.567"
					y2="137.092"
					gradientUnits="userSpaceOnUse"
				>
					<stop offset="0" stopColor="#57d163" />
					<stop offset="1" stopColor="#23b33a" />
				</linearGradient>
				<filter
					id="a"
					width="1.115"
					height="1.114"
					x="-.057"
					y="-.057"
					colorInterpolationFilters="sRGB"
				>
					<feGaussianBlur stdDeviation="3.531" />
				</filter>
			</defs>
			<path
				fill="#b3b3b3"
				d="m54.532 138.45 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.523h.023c33.707 0 61.139-27.426 61.153-61.135.006-16.335-6.349-31.696-17.895-43.251A60.75 60.75 0 0 0 87.94 25.983c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.558zm-40.811 23.544L24.16 123.88c-6.438-11.154-9.825-23.808-9.821-36.772.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954zm0 0"
				filter="url(#a)"
			/>
			<path
				fill="#fff"
				d="m12.966 161.238 10.439-38.114a73.42 73.42 0 0 1-9.821-36.772c.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954z"
			/>
			<path
				fill="url(#linearGradient1780)"
				d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.559 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.524h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.929z"
			/>
			<path
				fill="url(#b)"
				d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.313-6.179 22.558 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.517 31.126 8.523h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.928z"
			/>
			<path
				fill="#fff"
				fillRule="evenodd"
				d="M68.772 55.603c-1.378-3.061-2.828-3.123-4.137-3.176l-3.524-.043c-1.226 0-3.218.46-4.902 2.3s-6.435 6.287-6.435 15.332 6.588 17.785 7.506 19.013 12.718 20.381 31.405 27.75c15.529 6.124 18.689 4.906 22.061 4.6s10.877-4.447 12.408-8.74 1.532-7.971 1.073-8.74-1.685-1.226-3.525-2.146-10.877-5.367-12.562-5.981-2.91-.919-4.137.921-4.746 5.979-5.819 7.206-2.144 1.381-3.984.462-7.76-2.861-14.784-9.124c-5.465-4.873-9.154-10.891-10.228-12.73s-.114-2.835.808-3.751c.825-.824 1.838-2.147 2.759-3.22s1.224-1.84 1.836-3.065.307-2.301-.153-3.22-4.032-10.011-5.666-13.647"
			/>
		</svg>
	),
};

================
File: components/ui/mdx-components.tsx
================
import Image from "next/image";
import * as runtime from "react/jsx-runtime";
import { Callout } from "./callout";

const useMDXComponent = (code: string) => {
	const fn = new Function(code);
	return fn({ ...runtime }).default;
};

const components = {
	Image,
	Callout,
};

interface MdxProps {
	code: string;
}

export function MDXContent({ code }: MdxProps) {
	const Component = useMDXComponent(code);
	return <Component components={components} />;
}

================
File: components/ui/mobile-nav.tsx
================
"use client";

import { useState } from "react";
import Link from "next/link";
import { motion, AnimatePresence } from "framer-motion";
import { Menu, X } from "lucide-react";
import { ModeToggle } from "./mode-toggle";
import { DATA } from "@/app/data/resume";

// Enhanced animation variants
const menuVariants = {
	initial: {
		opacity: 0,
		height: 0,
	},
	animate: {
		opacity: 1,
		height: "100vh",
		transition: {
			duration: 0.5,
			ease: [0.12, 0, 0.39, 0],
		},
	},
	exit: {
		opacity: 0,
		height: 0,
		transition: {
			duration: 0.5,
			ease: [0.22, 1, 0.36, 1],
			when: "afterChildren",
		},
	},
};

const containerVariants = {
	initial: {
		transition: {
			staggerChildren: 0.09,
			staggerDirection: -1,
		},
	},
	animate: {
		transition: {
			staggerChildren: 0.09,
			delayChildren: 0.3,
		},
	},
};

const itemVariants = {
	initial: {
		y: 40,
		opacity: 0,
	},
	animate: {
		y: 0,
		opacity: 1,
		transition: {
			duration: 0.6,
			ease: [0.22, 1, 0.36, 1],
		},
	},
};

interface NavLinkProps {
	href: string;
	icon: React.ElementType;
	label: string;
	onClose: () => void;
}

const NavLink = ({ href, icon: Icon, label, onClose }: NavLinkProps) => (
	<motion.div variants={itemVariants}>
		<Link
			href={href}
			className="flex items-center gap-4 text-2xl font-medium hover:text-primary transition-colors duration-300"
			onClick={onClose}
		>
			<Icon className="h-6 w-6" />
			{label}
		</Link>
	</motion.div>
);

interface SocialLinkProps {
	name: string;
	url: string;
	icon: React.ElementType;
	onClose: () => void;
}

const SocialLink = ({ name, url, icon: Icon, onClose }: SocialLinkProps) => (
	<motion.div variants={itemVariants}>
		<Link
			href={url}
			className="flex items-center gap-4 text-xl font-medium hover:text-primary transition-colors duration-300"
			onClick={onClose}
		>
			<Icon className="h-5 w-5" />
			{name}
		</Link>
	</motion.div>
);

export function MobileNav() {
	const [isOpen, setIsOpen] = useState(false);
	const navLinks = DATA.navbar.filter(
		(item) => item.label.toLowerCase() !== "projects"
	);
	const socialLinks = Object.entries(DATA.contact.social)
		.filter(([_, social]) => social.navbar)
		.map(([key, social]) => ({
			key,
			...social,
		}));

	const handleClose = () => setIsOpen(false);

	return (
		<div className="w-full">
			<div className="flex items-center justify-between p-4">
				<div className="font-semibold text-xl z-50">Logo</div>
				<button
					onClick={() => setIsOpen(!isOpen)}
					className="z-50 p-2 hover:bg-accent rounded-full transition-colors duration-300"
					aria-label="Toggle menu"
				>
					{isOpen ? (
						<X className="h-6 w-6 text-foreground" />
					) : (
						<Menu className="h-6 w-6 text-foreground" />
					)}
				</button>
			</div>

			<AnimatePresence>
				{isOpen && (
					<motion.div
						variants={menuVariants}
						initial="initial"
						animate="animate"
						exit="exit"
						className="fixed inset-0 bg-background/95 backdrop-blur-sm z-40"
					>
						<motion.div
							variants={containerVariants}
							initial="initial"
							animate="animate"
							exit="initial"
							className="flex flex-col h-full px-6 pt-24 pb-12"
						>
							<nav className="flex flex-col space-y-6 mb-12">
								{navLinks.map((item) => (
									<NavLink
										key={item.href}
										href={item.href}
										icon={item.icon}
										label={item.label}
										onClose={handleClose}
									/>
								))}
							</nav>

							<div className="flex flex-col space-y-4">
								{socialLinks.map((social) => (
									<SocialLink
										key={social.key}
										name={social.name}
										url={social.url}
										icon={social.icon}
										onClose={handleClose}
									/>
								))}
							</div>

							<motion.div
								variants={itemVariants}
								className="mt-auto flex items-center gap-3"
							>
								<ModeToggle />
								<span className="text-base font-medium">Theme</span>
							</motion.div>
						</motion.div>
					</motion.div>
				)}
			</AnimatePresence>
		</div>
	);
}

================
File: components/ui/mode-toggle.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import { MoonIcon, SunIcon } from "@radix-ui/react-icons";
import { useTheme } from "next-themes";
import * as React from "react";

export const ModeToggle = React.forwardRef<
	HTMLButtonElement,
	React.ComponentPropsWithoutRef<typeof Button>
>((props, ref) => {
	const { theme, setTheme } = useTheme();

	return (
		<Button
			ref={ref}
			variant="ghost"
			type="button"
			size="icon"
			className="px-2"
			onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
			{...props}
		>
			<SunIcon className="h-[1.2rem] w-[1.2rem] text-neutral-800 dark:hidden dark:text-neutral-200" />
			<MoonIcon className="hidden h-[1.2rem] w-[1.2rem] text-neutral-800 dark:block dark:text-neutral-200" />
		</Button>
	);
});

ModeToggle.displayName = "ModeToggle";

================
File: components/ui/navbar.tsx
================
import { DATA } from "@/app/data/resume";

import { buttonVariants } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import {
	Tooltip,
	TooltipContent,
	TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import Link from "next/link";
import { Dock, DockIcon } from "./dock";
import { ModeToggle } from "./mode-toggle";
import { MobileNav } from "./mobile-nav";

export default function Navbar() {
	return (
		<>
			<div className="fixed top-0 left-0 right-0 z-50 p-4 bg-background/50 backdrop-blur-xl supports-[backdrop-filter]:bg-background/50 md:hidden">
				<MobileNav />
			</div>
			<div className="pointer-events-none fixed inset-x-0 bottom-0 z-30 mx-auto mb-4 flex origin-bottom h-full max-h-14">
				<div className="fixed bottom-0 inset-x-0 h-16 w-full bg-background to-transparent backdrop-blur-lg [-webkit-mask-image:linear-gradient(to_top,black,transparent)] dark:bg-background"></div>
				<Dock className="hidden md:flex z-50 pointer-events-auto relative mx-auto  min-h-full h-full items-center px-1 bg-background [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)] transform-gpu dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset] ">
					{DATA.navbar.map((item) => (
						<DockIcon key={item.href}>
							<Tooltip>
								<TooltipTrigger asChild>
									<Link
										href={item.href}
										className={cn(
											buttonVariants({ variant: "ghost", size: "icon" }),
											"size-12"
										)}
									>
										<item.icon className="size-4" />
									</Link>
								</TooltipTrigger>
								<TooltipContent>
									<p>{item.label}</p>
								</TooltipContent>
							</Tooltip>
						</DockIcon>
					))}
					<Separator orientation="vertical" className="h-full" />
					{Object.entries(DATA.contact.social)
						.filter(([_, social]) => social.navbar)
						.map(([name, social]) => (
							<DockIcon key={name}>
								<Tooltip>
									<TooltipTrigger asChild>
										<Link
											href={social.url}
											className={cn(
												buttonVariants({ variant: "ghost", size: "icon" }),
												"size-12"
											)}
										>
											<social.icon className="size-4" />
										</Link>
									</TooltipTrigger>
									<TooltipContent>
										<p>{name}</p>
									</TooltipContent>
								</Tooltip>
							</DockIcon>
						))}
					<Separator orientation="vertical" className="h-full py-2" />
					<DockIcon>
						<Tooltip>
							<TooltipTrigger asChild>
								<div className="size-12 flex items-center justify-center">
									<ModeToggle className="size-full" />
								</div>
							</TooltipTrigger>
							<TooltipContent>
								<p>Theme</p>
							</TooltipContent>
						</Tooltip>
					</DockIcon>
				</Dock>
			</div>
		</>
	);
}

================
File: components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: components/ui/PostItem.tsx
================
import { Calendar } from "lucide-react";
import Link from "next/link";
import { cn, formatDate } from "@/lib/utils";
import { buttonVariants } from "./button";
// import { Tag } from "./tag";

interface PostItemProps {
	slug: string;
	title: string;
	description?: string;
	date: string;
	tags?: Array<string>;
}

export default function PostItem({
	slug,
	title,
	description,
	date,
	tags,
}: PostItemProps) {
	return (
		<article className="flex flex-col gap-2 border-border border-b py-3">
			<div>
				<h2 className="text-2xl font-bold">
					<Link href={"/" + slug}>{title}</Link>
				</h2>
			</div>
			<div className="flex gap-2">
				{/* {tags?.map((tag) => (
					<Tag tag={tag} key={tag} />
				))} */}
			</div>
			<div className="max-w-none text-muted-foreground">{description}</div>
			<div className="flex justify-between items-center">
				<dl>
					<dt className="sr-only">Published On</dt>
					<dd className="text-sm sm:text-base font-medium flex items-center gap-1">
						<Calendar className="h-4 w-4" />
						<time dateTime={date}>{formatDate(date)}</time>
					</dd>
				</dl>
				<Link
					href={"/" + slug}
					className={cn(buttonVariants({ variant: "link" }), "py-0")}
				>
					Read more →
				</Link>
			</div>
		</article>
	);
}

================
File: components/ui/ProjectHoverCard.tsx
================
"use client";

import React, { MouseEvent } from "react";
import { motion, useMotionTemplate, useMotionValue } from "framer-motion";
import { GitHubLogoIcon, GlobeIcon } from "@radix-ui/react-icons";

interface ProjectHoverCardProps {
	title: string;
	byline: string;
	description: string;
	technologies: string[];
	githubUrl?: string;
	liveUrl?: string;
}

export default function ProjectHoverCard({
	title,
	byline,
	description,
	technologies,
	githubUrl,
	liveUrl,
}: ProjectHoverCardProps) {
	let mousex = useMotionValue(0);
	let mousey = useMotionValue(0);

	function handleMouseMove({ currentTarget, clientX, clientY }: MouseEvent) {
		let { left, top } = currentTarget.getBoundingClientRect();
		mousex.set(clientX - left);
		mousey.set(clientY - top);
	}

	return (
		<div
			className="h-full w-full max-w-[375px] mx-auto group relative rounded-xl border light:border-gray-200 bg-background px-6 py-8 flex flex-col"
			onMouseMove={handleMouseMove}
		>
			<motion.div
				className="pointer-events-none absolute -inset-px rounded-xl opacity-0 transition duration-300 group-hover:opacity-100"
				style={{
					background: useMotionTemplate`
            radial-gradient(
              300px circle at ${mousex}px ${mousey}px,
              rgb(234, 88, 13, 0.10),
              transparent 60%
            )
          `,
				}}
			/>
			<div className="relative z-10 flex flex-col h-full">
				{/* Header Section - Fixed Height */}
				<div className="mb-4">
					<h3 className="text-sm font-semibold leading-7 text-primary h-7">
						{byline}
					</h3>
					<h2 className="text-2xl sm:text-3xl font-bold tracking-tight text-foreground h-[2.5rem] sm:h-[3rem] flex items-center">
						{title}
					</h2>
				</div>

				{/* Description Section - Fixed Height */}
				<p className="text-sm leading-6 text-muted-foreground mb-6 flex-grow">
					{description}
				</p>

				{/* Technologies Section - Fixed Height */}
				<div className="min-h-[4rem]">
					<ul className="flex flex-wrap gap-1.5">
						{technologies.map((tech, index) => (
							<li
								key={index}
								className="px-2 py-0.5 text-xs font-semibold text-primary bg-primary/10 rounded-full uppercase tracking-wide"
							>
								{tech}
							</li>
						))}
					</ul>
				</div>

				{/* Links Section - Fixed at Bottom */}
				<div className="mt-auto pt-4 flex space-x-4">
					{githubUrl && (
						<a
							href={githubUrl}
							target="_blank"
							rel="noopener noreferrer"
							className="inline-flex items-center text-sm font-medium text-primary hover:text-primary/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
							aria-label="View GitHub repository"
						>
							<GitHubLogoIcon className="mr-2 h-4 w-4" />
							GitHub
						</a>
					)}
					{liveUrl && (
						<a
							href={liveUrl}
							target="_blank"
							rel="noopener noreferrer"
							className="inline-flex items-center text-sm font-medium text-primary hover:text-primary/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
							aria-label="View live project"
						>
							<GlobeIcon className="mr-2 h-4 w-4" />
							Live Demo
						</a>
					)}
				</div>
			</div>
		</div>
	);
}

================
File: components/ui/QueryPagination.tsx
================
"use client";
import { usePathname, useSearchParams } from "next/navigation";
import {
	Pagination,
	PaginationContent,
	PaginationItem,
	PaginationPrevious,
	PaginationLink,
	PaginationNext,
} from "./pagination";
interface QueryPaginationProps {
	totalPages: number;
	className?: string;
}
export function QueryPagination({
	totalPages,
	className,
}: QueryPaginationProps) {
	const pathname = usePathname();
	const searchParams = useSearchParams();
	const currentPage = Number(searchParams.get("page")) || 1;
	const prevPage = currentPage - 1;
	const nextPage = currentPage + 1;
	const createPageURL = (pageNumber: number | string) => {
		const params = new URLSearchParams(searchParams);
		params.set("page", pageNumber.toString());
		return `${pathname}?${params.toString()}`;
	};
	return (
		<Pagination className={className}>
			<PaginationContent>
				{prevPage >= 1 ? (
					<PaginationItem>
						<PaginationPrevious href={createPageURL(prevPage)} />
					</PaginationItem>
				) : null}
				{Array(totalPages)
					.fill("")
					.map((_, index) => (
						<PaginationItem
							className="hidden sm:inline-block"
							key={`page-button-${index}`}
						>
							<PaginationLink
								isActive={currentPage === index + 1}
								href={createPageURL(index + 1)}
							>
								{index + 1}
							</PaginationLink>
						</PaginationItem>
					))}
				{nextPage <= totalPages ? (
					<PaginationItem>
						<PaginationNext href={createPageURL(nextPage)} />
					</PaginationItem>
				) : null}
			</PaginationContent>
		</Pagination>
	);
}

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/SectionHeader.tsx
================
import { cn } from "@/lib/utils";

interface SectionHeaderProps {
	title: string;
	direction: "row" | "row-reverse";
}

const SectionHeader = ({ title, direction }: SectionHeaderProps) => {
	return (
		<div
			className={cn(
				"flex my-10",
				direction === "row" ? "flex-row" : "flex-row-reverse"
			)}
		>
			<div>
				<h2 className="text-3xl md:text-5xl font-black text-end">
					{title}
					<span className="text-primary">.</span>
				</h2>
			</div>
			<div className="mx-4 my-auto w-full h-[1px] bg-orange-500/20"></div>
		</div>
	);
};

export default SectionHeader;

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/tooltip.tsx
================
"use client";

import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import * as React from "react";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
	React.ElementRef<typeof TooltipPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
	<TooltipPrimitive.Content
		ref={ref}
		sideOffset={sideOffset}
		className={cn(
			"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
			className
		)}
		{...props}
	/>
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };

================
File: components/ui/Typography.tsx
================
import React, { ElementType } from "react";

export enum Variant {
	h1 = "h1",
	h2 = "h2",
	h3 = "h3",
	h4 = "h4",
	h5 = "h5",
	body = "body",
	"body-small" = "body-small",
	small = "small",
}

interface Props {
	variant: Variant;
	children: React.ReactNode;
	className?: string;
	as?: ElementType;
}

const tags: Record<Variant, ElementType> = {
	h1: "h1",
	h2: "h2",
	h3: "h3",
	h4: "h4",
	h5: "h5",
	body: "p",
	"body-small": "p",
	small: "span",
};

const sizes: Record<Variant, string> = {
	h1: "text-7xl font-bold max-sm:text-4xl",
	h2: "text-6xl font-bold max-sm:text-3xl",
	h3: "text-3xl font-bold max-sm:text-2xl",
	h4: "text-2xl font-bold max-sm:text-1xl",
	h5: "text-xl font-bold max-sm:text-lg",
	body: "text-lg max-sm:text-md",
	"body-small": "text-md max-sm:text-sm",
	small: "text-sm max-sm:text-xs",
};

export const Typography = ({ variant, children, className, as }: Props) => {
	const sizeClasses = sizes[variant];
	const Tag = as || tags[variant];

	return <Tag className={`${sizeClasses} ${className}`}>{children}</Tag>;
};

================
File: components/ui/WorkExperienceSection.tsx
================
import React from "react";
import { memo } from "react";
import BlurFade from "./Blur";
import { BriefcaseIcon, MapPinIcon } from "lucide-react";

type WorkExperienceSectionProps = {
	companyName?: string;
	role: string;
	roleDescription: string;
	location: string;
	tech?: string[];
	index: number;
	dateFrom: string;
	dateTo: string;
};

const WorkExperienceSection = memo(
	({
		companyName,
		role,
		roleDescription,
		location,
		tech,
		dateFrom,
		dateTo,
	}: WorkExperienceSectionProps) => {
		return (
			<BlurFade inView>
				<li className="group p-6 rounded-xl transition-all duration-300   shadow-none">
					<div className="space-y-4">
						<div className="flex items-center gap-x-4">
							<div>
								<h3 className="text-xl font-bold text-primary mb-1">{role}</h3>
								{companyName && (
									<span className="text-base font-medium text-muted-foreground">
										{companyName}
									</span>
								)}
							</div>
						</div>

						<p className="text-base text-foreground leading-relaxed">
							{roleDescription}
						</p>

						<div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground">
							<span className="flex items-center gap-2 bg-background/50 px-3 py-1 rounded-full">
								<BriefcaseIcon className="w-4 h-4" aria-hidden="true" />
								<time
									dateTime={`${dateFrom}/${dateTo}`}
								>{`${dateFrom} - ${dateTo}`}</time>
							</span>
							<span className="flex items-center gap-2 bg-background/50 px-3 py-1 rounded-full">
								<MapPinIcon className="w-4 h-4" aria-hidden="true" />
								{location}
							</span>
						</div>

						{tech && tech.length > 0 && (
							<div className="flex flex-wrap gap-2">
								{tech.map((item, index) => (
									<span
										key={`tech-${item}-${index}`}
										className="px-3 py-1 text-xs font-semibold text-primary bg-primary/10 rounded-full uppercase tracking-wide"
									>
										{item}
									</span>
								))}
							</div>
						)}
					</div>
				</li>
			</BlurFade>
		);
	}
);

WorkExperienceSection.displayName = "WorkExperienceSection";

export default WorkExperienceSection;

================
File: config/site.ts
================
export const siteConfig = {
	name: "Stav Fernandes",
	url: "http://localhost:3000",
	description: "Personal website and blog of Stav Fernandes",
	author: "Stav Fernandes",
	links: {
		personalSite: "https://stavfernandes.dev",
		github: "https://github.com/stevef24",
		linkedIn: "https://www.linkedin.com/in/stavfernandes24/",
	},
};

export type SiteConfig = typeof siteConfig;

================
File: content/blog/nextjs-eslint-prettier.mdx
================
---
title: "Setting Up a Next.js App with ESLint, Prettier, and Tailwind CSS"
description: Learn how to set up a Next.js project with ESLint, Prettier, and Tailwind CSS using npm. This guide walks you through linting, code formatting, and maintaining consistency.
date: 2024-09-17
tags: ["code", "nextjs", "eslint", "prettier", "tailwind"]
published: true
---

When starting any project, it’s essential to lay the groundwork with solid tooling. This setup helps ensure that your code is consistent, easy to read, and less prone to errors. By configuring tools like ESLint for linting and Prettier for code formatting right from the beginning, you establish a reliable foundation that will scale as your project grows. It also helps when collaborating with other developers by enforcing consistent code styles and reducing potential errors early in the development process.

In this guide, we’ll walk through setting up a new Next.js application with ESLint, Prettier, and Tailwind CSS using `npm`. We'll cover linting, code formatting, and keeping everything consistent with best practices.

## 1. **Creating an Example App**

Let’s start by creating a new Next.js app named `eslint-prettier`. We’ll use `npm` as our package manager:

```bash
npx create-next-app@latest eslint-prettier
```

During the setup, choose the following options:

- TypeScript
- ESLint
- Tailwind CSS
- Use the `src` directory for your source files

Leave the default import alias as is to keep things simple for this guide.

## 2. **Linting with ESLint**

Next.js comes with ESLint configured right out of the box. It uses the `next/core-web-vitals` config, which ensures that your project follows strict best practices:

```json
// inside .eslintrc.json
{
	"extends": "next/core-web-vitals"
}
```

To check if your code adheres to the linting rules, run the following command in your terminal:

```bash
npm run lint
```

Since we’ve just set up the app, you shouldn’t see any linting errors. But this will help keep your code in shape as you continue building.

## 3. **Adding Prettier for Code Formatting**

Prettier is a code formatter that automatically enforces consistent styling. Let's install it along with some related packages:

```bash
npm install eslint-config-prettier prettier prettier-plugin-tailwindcss --save-dev
```

Here’s what these packages do:

- **`eslint-config-prettier`**: Ensures ESLint and Prettier work together smoothly by disabling conflicting ESLint rules.
- **`prettier`**: The code formatter itself.
- **`prettier-plugin-tailwindcss`**: Automatically sorts Tailwind CSS classes in your code.

Next, update your `.eslintrc.json` file to include Prettier:

```json
// inside .eslintrc.json
{
	"extends": ["next/core-web-vitals", "prettier"]
}
```

This configuration prevents conflicts between ESLint and Prettier.

## 4. **Configuring Prettier**

To fine-tune Prettier’s behavior, create a `.prettierrc.json` file in the root of your project:

```json
{
	"trailingComma": "es5",
	"semi": true,
	"tabWidth": 2,
	"singleQuote": false,
	"jsxSingleQuote": false,
	"plugins": ["prettier-plugin-tailwindcss"]
}
```

Here’s what each option does:

- **`trailingComma`**: Allows trailing commas.
- **`semi`**: Enforces semicolons.
- **`tabWidth`**: Sets indentation to two spaces.
- **`singleQuote`** and **`jsxSingleQuote`**: Set to `false` to use double quotes throughout your code.
- **`plugins`**: Includes the Tailwind CSS plugin to sort Tailwind classes automatically.

With this in place, Prettier will automatically format your code every time you save a file. If you’re using VSCode, consider enabling autosave for extra convenience.

## 5. **Testing Prettier and Tailwind Integration**

To see the integration in action, open the `page.tsx` file that includes Tailwind CSS classes. When you save the file, Prettier will reorder the classes based on Tailwind's recommended order.

## 6. **Using Additional Prettier Plugins**

You can enhance your Prettier setup further by using additional plugins. A common plugin is the `sort-imports` plugin, which automatically organizes your import statements. To install it:

```bash
npm install @ianvs/prettier-plugin-sort-imports --save-dev
```

Then, update your `.prettierrc.json` file to include this plugin:

```json
// inside .prettierrc.json
{
	"plugins": ["prettier-plugin-tailwindcss", "sort-imports"],
	"importOrder": [
		"^(react/(.*)$)|^(react$)",
		"",
		"<THIRD_PARTY_MODULES>",
		"",
		"^[./]"
	]
}
```

This configuration sorts React imports first, then third-party modules, and finally local imports, separating them with blank lines for clarity.

## 7. **Establishing Consistent Standards**

By setting up ESLint and Prettier early in your project, you can maintain clean, consistent code across your entire team. While there are many ESLint rules and Prettier configurations to choose from, the key is to find a setup that works for your project and stick to it.

================
File: content/blog/nextjs-lintin.mdx
================
---
title: Lets see what we can do with rehype pretty code
description: Syntax highlighting, line numbers, line highlights, word highlights
date: 2024-03-04
tags: ["code", "rehype pretty", "mdx"]
published: true
---

[`rehype-pretty-code`](https://github.com/atomiks/rehype-pretty-code) is a Rehype plugin powered by the
[`shiki`](https://github.com/shikijs/shiki) syntax highlighter that provides beautiful code blocks for Markdown or MDX. It works on both the server at build-time (avoiding runtime syntax highlighting) and on the client for dynamic highlighting.

## Editor-Grade Highlighting

<span className="mix-blend-plus-lighter text-zinc-400/80">
	Enjoy the accuracy and granularity of VS Code's syntax highlighting engine and
	the popularity of its themes ecosystem â€” use any VS Code theme you want!
</span>

## Line Numbers and Line Highlighting

Draw attention to a particular line of code.

```js {4} showLineNumbers
import { useFloating } from "@floating-ui/react";

function MyComponent() {
	const { refs, floatingStyles } = useFloating();

	return (
		<>
			<div ref={refs.setReference} />
			<div ref={refs.setFloating} style={floatingStyles} />
		</>
	);
}
```

## Word Highlighting

Draw attention to a particular word or series of characters.

```js /floatingStyles/
import { useFloating } from "@floating-ui/react";

function MyComponent() {
	const { refs, floatingStyles } = useFloating();

	return (
		<>
			<div ref={refs.setReference} />
			<div ref={refs.setFloating} style={floatingStyles} />
		</>
	);
}
```

## ANSI Highlighting

```ansi
[0;36m  vite v5.0.0[0;32m dev server running at:[0m

  > Local: [0;36mhttp://localhost:[0;36;1m3000[0;36m/[0m
  > Network: [0;2muse `--host` to expose[0m

  [0;36mready in 125ms.[0m

[0;2m8:38:02 PM[0m [0;36;1m[vite][0m [0;32mhmr update [0;2m/src/App.jsx
```

Inline ANSI: `> Local: [0;36mhttp://localhost:[0;36;1m3000[0;36m/[0m{:ansi}`

---

### Kitchen Sink Meta Strings

```js showLineNumbers {2-4} title="isEven.js" /console/ caption="Im a caption"
function isEven(number) {
	if (number === 1) {
		return false;
	} else if (number === 2) {
		return true;
	} else if (number === 3) {
		return false;
	} else if (number === 4) {
		return true;
	} else if (number === 5) {
		return false;
	} else if (number === 6) {
		return true;
	} else if (number === 7) {
		return false;
	} else if (number === 8) {
		return true;
	} else if (number === 9) {
		return false;
	} else if (number === 10) {
		return true;
	} else {
		return "Number is not between 1 and 10.";
	}
}

// Example usage:
console.log(isEven(3)); // Should return false
console.log(isEven(4)); // Should return true
console.log(isEven(11)); // Should return "Number is not between 1 and 10."
```

================
File: hooks/GetPointerMove.tsx
================
"use client";

import { useRef } from "react";
export const useGetPointerMovement = (useDistanceFromCenter?: boolean) => {
	const boundingRef = useRef<DOMRect | null>(null);

	const props = {
		onMouseLeave: () => (boundingRef.current = null),
		onMouseEnter: (ev: React.MouseEvent<HTMLDivElement>) => {
			boundingRef.current = ev.currentTarget.getBoundingClientRect();
		},
		onMouseMove: (ev: React.MouseEvent<HTMLDivElement>) => {
			if (!boundingRef.current) return;
			const x = ev.clientX - boundingRef.current.left;
			const y = ev.clientY - boundingRef.current.top;
			let xPercentage = x / boundingRef.current.width;
			let yPercentage = y / boundingRef.current.height;

			if (useDistanceFromCenter) {
				xPercentage = (xPercentage - 0.5) * 2;
				yPercentage = (yPercentage - 0.5) * 2;
			}

			ev.currentTarget.style.setProperty("--x", `${xPercentage}`);
			ev.currentTarget.style.setProperty("--y", `${yPercentage}`);
		},
	};

	return props;
};

================
File: lib/utils.ts
================
import { Post } from "@/.velite";
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

export function formatDate(input: string | number): string {
	const date = new Date(input);
	return date.toLocaleDateString("en-US", {
		month: "long",
		day: "numeric",
		year: "numeric",
	});
}

export function sortPosts(posts: Array<Post>) {
	return posts.sort((a, b) => {
		return new Date(b.date).getTime() - new Date(a.date).getTime();
	});
}

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: styles/mdx.css
================
[data-rehype-pretty-code-figure] pre {
	@apply px-0;
}

[data-rehype-pretty-code-figure] code {
	@apply text-sm !leading-loose md:text-base border-0 p-0;
}

[data-rehype-pretty-code-figure] code[data-line-numbers] {
	counter-reset: line;
}

[data-rehype-pretty-code-figure] code[data-line-numbers] > [data-line]::before {
	counter-increment: line;
	content: counter(line);
	@apply mr-4 inline-block w-4 text-right text-gray-500;
}

[data-rehype-pretty-code-figure] [data-line] {
	@apply border-l-2 border-l-transparent px-3;
}

[data-rehype-pretty-code-figure] [data-highlighted-line] {
	background: rgba(200, 200, 255, 0.1);
	@apply border-l-blue-400;
}

[data-rehype-pretty-code-figure] [data-highlighted-chars] {
	@apply rounded bg-zinc-600/50;
	box-shadow: 0 0 0 4px rgb(82 82 91 / 0.5);
}

[data-rehype-pretty-code-figure] [data-chars-id] {
	@apply border-b-2 p-1 shadow-none;
}

.subheading-anchor {
	@apply no-underline hover:underline;
}

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# velite files
.velite

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: next.config.mjs
================
import { build } from "velite";

/** @type {import('next').NextConfig} */
export default {
	// othor next config here...
	webpack: (config) => {
		config.plugins.push(new VeliteWebpackPlugin());
		return config;
	},
};

class VeliteWebpackPlugin {
	static started = false;
	constructor(/** @type {import('velite').Options} */ options = {}) {
		this.options = options;
	}
	apply(/** @type {import('webpack').Compiler} */ compiler) {
		// executed three times in nextjs !!!
		// twice for the server (nodejs / edge runtime) and once for the client
		compiler.hooks.beforeCompile.tapPromise("VeliteWebpackPlugin", async () => {
			if (VeliteWebpackPlugin.started) return;
			VeliteWebpackPlugin.started = true;
			const dev = compiler.options.mode === "development";
			this.options.watch = this.options.watch ?? dev;
			this.options.clean = this.options.clean ?? !dev;
			await build(this.options); // start velite
		});
	}
}

================
File: package.json
================
{
	"name": "website-v6",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "next dev",
		"build": "next build",
		"start": "next start",
		"lint": "next lint"
	},
	"dependencies": {
		"@mdx-js/loader": "^3.0.1",
		"@mdx-js/react": "^3.0.1",
		"@next/mdx": "^14.2.3",
		"@radix-ui/react-avatar": "^1.1.0",
		"@radix-ui/react-dialog": "^1.1.2",
		"@radix-ui/react-dropdown-menu": "^2.0.6",
		"@radix-ui/react-icons": "^1.3.0",
		"@radix-ui/react-scroll-area": "^1.2.0",
		"@radix-ui/react-separator": "^1.1.0",
		"@radix-ui/react-slot": "^1.1.0",
		"@radix-ui/react-tooltip": "^1.0.7",
		"@splinetool/react-spline": "^2.2.6",
		"@splinetool/runtime": "^1.3.8",
		"@types/mdx": "^2.0.13",
		"class-variance-authority": "^0.7.0",
		"clsx": "^2.1.1",
		"framer-motion": "^11.2.4",
		"lucide-react": "^0.395.0",
		"next": "^14.2.12",
		"next-themes": "^0.3.0",
		"react": "^18",
		"react-dom": "^18",
		"react-icons": "^5.2.1",
		"rehype-autolink-headings": "^7.1.0",
		"rehype-pretty-code": "^0.13.2",
		"rehype-slug": "^6.0.0",
		"shiki": "^1.5.2",
		"tailwind-merge": "^2.3.0",
		"tailwindcss-animate": "^1.0.7"
	},
	"devDependencies": {
		"@tailwindcss/typography": "^0.5.13",
		"@types/node": "^20",
		"@types/react": "^18",
		"@types/react-dom": "^18",
		"eslint": "^8",
		"eslint-config-next": "14.2.3",
		"postcss": "^8",
		"tailwindcss": "^3.4.1",
		"typescript": "^5",
		"velite": "^0.1.0-rc.3"
	}
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";

const config = {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: "2rem",
			screens: {
				"2xl": "1400px",
			},
		},
		backgroundImage: {
			"primary-gradient":
				"linear-gradient(90deg, hsla(52, 82%, 52%, 1) 0%, hsla(1, 92%, 47%, 0.5) 50%)",
			frost:
				"repeating-linear-gradient(to right, rgba(255,255,255,.04) 0%, rgba(0,0,0,.39) 90%, rgba(255,255,255,.27) 10%)",
		},
		extend: {
			fontFamily: {
				sans: ["var(--font-sans)", ...fontFamily.sans],
			},
			colors: {
				border: "hsl(var(--border))",
				input: "hsl(var(--input))",
				ring: "hsl(var(--ring))",
				background: "hsl(var(--background))",
				foreground: "hsl(var(--foreground))",
				primary: {
					DEFAULT: "hsl(var(--primary))",
					foreground: "hsl(var(--primary-foreground))",
				},
				secondary: {
					DEFAULT: "hsl(var(--secondary))",
					foreground: "hsl(var(--secondary-foreground))",
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive))",
					foreground: "hsl(var(--destructive-foreground))",
				},
				muted: {
					DEFAULT: "hsl(var(--muted))",
					foreground: "hsl(var(--muted-foreground))",
				},
				accent: {
					DEFAULT: "hsl(var(--accent))",
					foreground: "hsl(var(--accent-foreground))",
				},
				popover: {
					DEFAULT: "hsl(var(--popover))",
					foreground: "hsl(var(--popover-foreground))",
				},
				card: {
					DEFAULT: "hsl(var(--card))",
					foreground: "hsl(var(--card-foreground))",
				},
			},
			borderRadius: {
				lg: "var(--radius)",
				md: "calc(var(--radius) - 2px)",
				sm: "calc(var(--radius) - 4px)",
			},
			keyframes: {
				"accordion-down": {
					from: {
						height: "0",
					},
					to: {
						height: "var(--radix-accordion-content-height)",
					},
				},
				"accordion-up": {
					from: {
						height: "var(--radix-accordion-content-height)",
					},
					to: {
						height: "0",
					},
				},
				grid: {
					"0%": {
						transform: "translateY(-50%)",
					},
					"100%": {
						transform: "translateY(0)",
					},
				},
			},
			animation: {
				"accordion-down": "accordion-down 0.2s ease-out",
				"accordion-up": "accordion-up 0.2s ease-out",
				grid: "grid 60s linear infinite",
			},
		},
	},
	plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;

export default config;

================
File: tsconfig.json
================
{
	"compilerOptions": {
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": true,
		"noEmit": true,
		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"plugins": [
			{
				"name": "next"
			}
		],
		"paths": {
			"@/*": ["./*"],
			"#site/content": ["./.velite"]
		}
	},
	"include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
	"exclude": ["node_modules"]
}

================
File: velite.config.ts
================
import { defineConfig, defineCollection, s } from "velite";
import rehypeSlug from "rehype-slug";
import rehypePrettyCode from "rehype-pretty-code";
import rehypeAutolinkHeadings from "rehype-autolink-headings";

const computedFields = <T extends { slug: string }>(data: T) => ({
	...data,
	slugAsParams: data.slug.split("/").slice(1).join("/"),
});

const posts = defineCollection({
	name: "Post",
	pattern: "blog/**/*.mdx",
	schema: s
		.object({
			slug: s.path(),
			title: s.string().max(99),
			description: s.string().max(999).optional(),
			date: s.isodate(),
			published: s.boolean().default(true),
			tags: s.array(s.string()).optional(),
			body: s.mdx(),
		})
		.transform(computedFields),
});

export default defineConfig({
	root: "content",
	output: {
		data: ".velite",
		assets: "public/static",
		base: "/static/",
		name: "[name]-[hash:6].[ext]",
		clean: true,
	},
	collections: { posts },
	mdx: {
		rehypePlugins: [
			rehypeSlug,
			[rehypePrettyCode, { theme: "github-dark" }],
			[
				rehypeAutolinkHeadings,
				{
					behavior: "wrap",
					properties: {
						className: ["subheading-anchor"],
						ariaLabel: "Link to section",
					},
				},
			],
		],
		remarkPlugins: [],
	},
});
